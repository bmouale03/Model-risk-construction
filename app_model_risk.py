# -*- coding: utf-8 -*-
"""
Application Streamlit : Mod√®le de pr√©diction de risque de construction
Auteur : [Ton Nom]
Date : 2025
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, confusion_matrix, classification_report
from sklearn.metrics import ConfusionMatrixDisplay

# ================================================
# Configuration de la page
# ================================================
st.set_page_config(
    page_title="Mod√®le de pr√©diction de Risque de Construction",
    layout="wide"
)

st.title("Mod√®le de Risque en Construction")
st.markdown("Analyse et pr√©diction du risque √† partir de 7 facteurs explicatifs.")

# ================================================
# Fonctions utiles
# ================================================
def classify_risk(value):
    if value < 0.45:
        return "Critique"
    elif value < 0.65:
        return "Moyen"
    else:
        return "Excellent"

def generate_example_data(n=100):
    np.random.seed(42)
    data = pd.DataFrame({
        "Niveau ing√©nieurs": np.random.randint(1, 6, n),
        "Niveau techniciens": np.random.randint(1, 6, n),
        "Exp√©rience ing√©nieurs": np.random.randint(1, 11, n),
        "Exp√©rience techniciens": np.random.randint(1, 11, n),
        "Technologie exploit√©e": np.random.randint(1, 4, n),
        "Impacc Climat": np.random.randint(1, 4, n),
        "Exp√©rience entreprise": np.random.randint(1, 21, n),
    })
    data["indice_risk_const"] = np.round(
        0.3 + 0.4 * np.random.rand(n), 3
    )
    return data

# ================================================
# Interface avec onglets
# ================================================
tab1, tab2 = st.tabs([" Analyse", "‚Ñπ √Ä propos du projet"])

with tab1:
    st.header("Importation et configuration")

    # Upload de fichier
    uploaded_file = st.file_uploader("üìÇ Importer un fichier Excel", type=["xlsx"])

    # Exemple de donn√©es
    if st.button(" Exemple de donn√©es"):
        df = generate_example_data()
        st.success("Exemple de donn√©es g√©n√©r√©es ")
    elif uploaded_file:
        df = pd.read_excel(uploaded_file)
        st.success("Fichier charg√© ")
    else:
        df = None

    if df is not None:
        st.subheader("Aper√ßu des donn√©es")
        st.dataframe(df.head())

        # S√©paration des variables
        X = df[['Niveau ing√©nieurs', 'Niveau techniciens', 'Exp√©rience ing√©nieurs',
                'Exp√©rience techniciens', 'Technologie exploit√©e', 'Impacc Climat',
                'Exp√©rience entreprise']]
        y = df['indice_risk_const']

        # S√©lection du mod√®le
        model_choice = st.radio("Choisir un mod√®le :", ["R√©gression Lin√©aire", "Random Forest"])

        # Train/Test split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Entra√Ænement du mod√®le
        if model_choice == "R√©gression Lin√©aire":
            model = LinearRegression()
        else:
            model = RandomForestRegressor(random_state=42)

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        # R√©sultats
        st.subheader(" R√©sultats des pr√©dictions")
        df_results = X_test.copy()
        df_results["Risque_R√©el"] = y_test
        df_results["Risque_Pr√©dit"] = y_pred
        df_results["Diapason"] = df_results["Risque_Pr√©dit"].apply(classify_risk)

        st.dataframe(df_results.head(15))

        # Erreur
        mse = mean_squared_error(y_test, y_pred)
        st.metric("Erreur quadratique moyenne (MSE)", f"{mse:.4f}")

        # Visualisations
        st.subheader("Visualisations")

        col1, col2 = st.columns(2)

        with col1:
            fig, ax = plt.subplots()
            df_results["Diapason"].value_counts().plot(kind="bar", ax=ax, color="skyblue")
            ax.set_title("R√©partition par cat√©gorie de risque")
            st.pyplot(fig)

        with col2:
            fig, ax = plt.subplots()
            ax.scatter(y_test, y_pred, alpha=0.7, color="orange")
            ax.plot([0,1],[0,1], color="red", linestyle="--")
            ax.set_title("Pr√©diction vs R√©el")
            st.pyplot(fig)

        # Matrice de confusion
        st.subheader(" Matrice de confusion")
        y_test_classes = y_test.apply(classify_risk)
        y_pred_classes = pd.Series(y_pred).apply(classify_risk)

        cm = confusion_matrix(y_test_classes, y_pred_classes, labels=["Critique", "Moyen", "Excellent"])

        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
                    xticklabels=["Critique", "Moyen", "Excellent"],
                    yticklabels=["Critique", "Moyen", "Excellent"], ax=ax)
        ax.set_title("Matrice de confusion (Heatmap)")
        st.pyplot(fig)

        # Rapport de classification
        st.subheader("Rapport de classification")
        report_dict = classification_report(y_test_classes, y_pred_classes,
                                            target_names=["Critique", "Moyen", "Excellent"],
                                            output_dict=True)
        df_report = pd.DataFrame(report_dict).transpose()
        st.dataframe(df_report)

        # Export Excel
        st.subheader(" Exporter les r√©sultats")
        from io import BytesIO
        output = BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            df_results.to_excel(writer, sheet_name="R√©sultats", index=False)
            pd.DataFrame(cm, 
                         index=["R√©el_Critique", "R√©el_Moyen", "R√©el_Excellent"],
                         columns=["Pr√©dit_Critique", "Pr√©dit_Moyen", "Pr√©dit_Excellent"]
                        ).to_excel(writer, sheet_name="Confusion_Matrix")
            df_report.to_excel(writer, sheet_name="Classification_Report")

        st.download_button(
            label="T√©l√©charger le rapport Excel",
            data=output.getvalue(),
            file_name="rapport_risque.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )


# ================================================
# Onglet 2 : √Ä propos du projet
# ================================================
with tab2:
    st.header("√Ä propos du projet")
    st.markdown("""
    Cette application Streamlit a √©t√© con√ßue pour **analyser et pr√©dire le risque de construction** 
    d'une entreprise en fonction de 7 facteurs explicatifs :

    - Niveau ing√©nieurs  
    - Niveau techniciens  
    - Exp√©rience ing√©nieurs  
    - Exp√©rience techniciens  
    - Technologie exploit√©e  
    - Impact Climat  
    - Exp√©rience entreprise  

    **Objectifs :**  
    - Fournir une estimation de l‚Äô`indice_risk_const`  
    - Classer les entreprises selon un diapason **Critique / Moyen / Excellent**  
    - Offrir des visualisations interactives et un rapport t√©l√©chargeable  
    """)

    st.subheader("Guide d‚Äôutilisation")

    with st.expander("‚ÑπÔ∏è  Charger vos donn√©es"):
        st.markdown("""
        - Cliquez sur **Importer un fichier Excel** pour t√©l√©verser vos donn√©es.  
        - Votre fichier doit contenir les colonnes suivantes :  
          *Niveau ing√©nieurs, Niveau techniciens, Exp√©rience ing√©nieurs, Exp√©rience techniciens, Technologie exploit√©e, Impact Climat, Exp√©rience entreprise, indice_risk_const*  
        """)

    with st.expander("2Ô∏è‚É£ Tester avec des donn√©es d‚Äôexemple"):
        st.markdown("""
        - Cliquez sur le bouton **Exemple de donn√©es** si vous n‚Äôavez pas encore de fichier.  
        - Cela g√©n√®re un jeu de donn√©es simul√©es pour tester l‚Äôapplication.  
        """)

    with st.expander("3Ô∏è‚É£ Choisir un mod√®le de pr√©diction"):
        st.markdown("""
        - **R√©gression Lin√©aire** : simple et interpr√©table.  
        - **Random Forest** : plus robuste, capture mieux la complexit√©.  
        """)

    with st.expander("4Ô∏è‚É£ Lancer l‚Äôanalyse"):
        st.markdown("""
        - Le mod√®le est entra√Æn√© sur **80% des donn√©es** et test√© sur **20%**.  
        - Les pr√©dictions sont affich√©es et class√©es en :  
          - **Critique** : risque < 0.45  
          - **Moyen** : 0.45 ‚â§ risque < 0.65  
          - **Excellent** : risque ‚â• 0.65  
        """)

    with st.expander("5Ô∏è‚É£ Explorer les r√©sultats"):
        st.markdown("""
        - **Histogrammes** et **camemberts** des classes  
        - **Scatter plot** : comparaison risques r√©els vs pr√©dits  
        - **Matrice de confusion** : qualit√© de classification  
        """)

    with st.expander("6Ô∏è‚É£ Exporter le rapport"):
        st.markdown("""
        - T√©l√©chargez un **fichier Excel complet** avec :  
          - R√©sultats pr√©dits + cat√©gories  
          - Matrice de confusion  
          - Indicateurs de performance (**Pr√©cision, Rappel, F1-score**)  
        """)

    st.markdown("""
    ---
    üë®‚Äçüíª Auteur : *Dr. MOUALE*  
    üìÖ Date : 2025  
    üìú Licence : Libre usage acad√©mique et professionnel  
    """)
